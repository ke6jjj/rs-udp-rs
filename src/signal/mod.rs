mod debug;
mod block;
mod filter;
mod evaluate;

use block::{lp_filter::LowPassFilter, affine::AffineTransform, one_pole::OnePoleFilter, rectify::Rectify};
use evaluate::threshold::ThresholdTrigger;

pub use block::lp_filter::{LowPassFilterBuilder, LPFError};
pub use block::affine::{AffineTransformBuilder, AffineError};
pub use block::one_pole::{OnePoleFilterBuilder, OnePoleError, FilterType as OnePoleFilterType};
pub use block::rectify::{RectifyBuilder, RectifyType, RectifyError};
pub use evaluate::threshold::{ThresholdTriggerBuilder, ThresholdError};

pub use debug::{FilterObserver, ObserverError, FilterStep};

use std::iter::Sum;
use ndarray::ScalarOperand;
use num_traits::{Float, One, Zero};
use sci_rs::na::RealField;

/// An event which can be generated by an evaluation block.
/// (A trigger or other alarm).
pub enum Event<T: RealField + Float + Copy + One + Zero + ScalarOperand> {
    Triggered(usize),
    Reset(usize),
    MaximumFound(usize, T)
}

/// A signal processing block, which operates on some input samples and produces
/// some output samples.
pub trait SignalBlock<T> where T: RealField + Float + Copy + Sum + One + Zero + ScalarOperand, {
    fn reset(&mut self);
    fn process(&mut self, input: &ndarray::Array1<T>) -> ndarray::Array1<T>;
}

/// A signal processing block which operates on some input samples and optionally
/// produces events.
pub trait EventBlock<T> where T: RealField + Float + Copy + Sum + One + Zero + ScalarOperand, {
    fn reset(&mut self);
    fn process(&mut self, input: &ndarray::Array1<T>, obs: impl FnMut(Event<T>) -> ());
}

pub enum ProcessingBlock<T> where T: RealField + Float + Copy + Sum + One + Zero + ScalarOperand,{
    AffineTransform(Box<AffineTransform<T>>),
    LowPassFilter(Box<LowPassFilter<T>>),
    OnePoleFilter(Box<OnePoleFilter<T>>),
    Rectify(Rectify),
}

impl<T: RealField + Float + Copy + Sum + One + Zero + ScalarOperand> SignalBlock<T> for ProcessingBlock<T> {
    fn process(&mut self, input: &ndarray::Array1<T>) -> ndarray::Array1<T> {
        match self {
            ProcessingBlock::AffineTransform(a) => a.process(input),
            ProcessingBlock::LowPassFilter(l) => l.process(input),
            ProcessingBlock::OnePoleFilter(o) => o.process(input),
            ProcessingBlock::Rectify(r) => r.process(input),
        }
    }

    fn reset(&mut self) {
        match self {
            ProcessingBlock::AffineTransform(a) => a.reset(),
            ProcessingBlock::LowPassFilter(l) => l.reset(),
            ProcessingBlock::OnePoleFilter(o) => o.reset(),
            ProcessingBlock::Rectify(r) => <Rectify as SignalBlock<T>>::reset(r),
        }
    }
}
pub enum EventGeneratingBlock<T> where T: RealField + Float + Copy + Sum + One + Zero + ScalarOperand,{
    ThresholdTrigger(Box<ThresholdTrigger<T>>)
}

impl<T: RealField + Float + Copy + Sum + One + Zero + ScalarOperand> EventBlock<T> for EventGeneratingBlock<T> {
    fn reset(&mut self) {
        match self {
            Self::ThresholdTrigger(t) => t.reset(),
        }
    }

    fn process(&mut self, input: &ndarray::Array1<T>, obs: impl FnMut(Event<T>) -> ()) {
        match self {
            Self::ThresholdTrigger(t) => t.process(input, obs),
        }
    }
}

impl<T: RealField + Float + Copy + Sum + One + Zero + ScalarOperand> From<AffineTransform<T>> for ProcessingBlock<T> {
    fn from(value: AffineTransform<T>) -> Self {
        Self::AffineTransform(Box::new(value))
    }
}

impl<T: RealField + Float + Copy + Sum + One + Zero + ScalarOperand> From<LowPassFilter<T>> for ProcessingBlock<T> {
    fn from(value: LowPassFilter<T>) -> Self {
        Self::LowPassFilter(Box::new(value))
    }
}

impl<T: RealField + Float + Copy + Sum + One + Zero + ScalarOperand> From<OnePoleFilter<T>> for ProcessingBlock<T> {
    fn from(value: OnePoleFilter<T>) -> Self {
        Self::OnePoleFilter(Box::new(value))
    }
}

impl<T: RealField + Float + Copy + Sum + One + Zero + ScalarOperand> From<Rectify> for ProcessingBlock<T> {
    fn from(value: Rectify) -> Self {
        Self::Rectify(value)
    }
}

impl<T: RealField + Float + Copy + Sum + One + Zero + ScalarOperand> From<ThresholdTrigger<T>> for EventGeneratingBlock<T> {
    fn from(value: ThresholdTrigger<T>) -> Self {
        Self::ThresholdTrigger(Box::new(value))
    }
}